// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package chainmanager

import (
	"context"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/megaspacelab/megaconnect/grpc"
	"sync"
)

var (
	lockOrchestratorServerMockRegisterChainManager   sync.RWMutex
	lockOrchestratorServerMockRenewLease             sync.RWMutex
	lockOrchestratorServerMockReportBlockEvents      sync.RWMutex
	lockOrchestratorServerMockUnregsiterChainManager sync.RWMutex
)

// OrchestratorServerMock is a mock implementation of OrchestratorServer.
//
//     func TestSomethingThatUsesOrchestratorServer(t *testing.T) {
//
//         // make and configure a mocked OrchestratorServer
//         mockedOrchestratorServer := &OrchestratorServerMock{
//             RegisterChainManagerFunc: func(in1 context.Context, in2 *grpc.RegisterChainManagerRequest) (*grpc.RegisterChainManagerResponse, error) {
// 	               panic("TODO: mock out the RegisterChainManager method")
//             },
//             RenewLeaseFunc: func(in1 context.Context, in2 *grpc.RenewLeaseRequest) (*grpc.Lease, error) {
// 	               panic("TODO: mock out the RenewLease method")
//             },
//             ReportBlockEventsFunc: func(in1 grpc.Orchestrator_ReportBlockEventsServer) error {
// 	               panic("TODO: mock out the ReportBlockEvents method")
//             },
//             UnregsiterChainManagerFunc: func(in1 context.Context, in2 *grpc.UnregisterChainManagerRequest) (*empty.Empty, error) {
// 	               panic("TODO: mock out the UnregsiterChainManager method")
//             },
//         }
//
//         // TODO: use mockedOrchestratorServer in code that requires OrchestratorServer
//         //       and then make assertions.
//
//     }
type OrchestratorServerMock struct {
	// RegisterChainManagerFunc mocks the RegisterChainManager method.
	RegisterChainManagerFunc func(in1 context.Context, in2 *grpc.RegisterChainManagerRequest) (*grpc.RegisterChainManagerResponse, error)

	// RenewLeaseFunc mocks the RenewLease method.
	RenewLeaseFunc func(in1 context.Context, in2 *grpc.RenewLeaseRequest) (*grpc.Lease, error)

	// ReportBlockEventsFunc mocks the ReportBlockEvents method.
	ReportBlockEventsFunc func(in1 grpc.Orchestrator_ReportBlockEventsServer) error

	// UnregsiterChainManagerFunc mocks the UnregsiterChainManager method.
	UnregsiterChainManagerFunc func(in1 context.Context, in2 *grpc.UnregisterChainManagerRequest) (*empty.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterChainManager holds details about calls to the RegisterChainManager method.
		RegisterChainManager []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *grpc.RegisterChainManagerRequest
		}
		// RenewLease holds details about calls to the RenewLease method.
		RenewLease []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *grpc.RenewLeaseRequest
		}
		// ReportBlockEvents holds details about calls to the ReportBlockEvents method.
		ReportBlockEvents []struct {
			// In1 is the in1 argument value.
			In1 grpc.Orchestrator_ReportBlockEventsServer
		}
		// UnregsiterChainManager holds details about calls to the UnregsiterChainManager method.
		UnregsiterChainManager []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *grpc.UnregisterChainManagerRequest
		}
	}
}

// RegisterChainManager calls RegisterChainManagerFunc.
func (mock *OrchestratorServerMock) RegisterChainManager(in1 context.Context, in2 *grpc.RegisterChainManagerRequest) (*grpc.RegisterChainManagerResponse, error) {
	if mock.RegisterChainManagerFunc == nil {
		panic("OrchestratorServerMock.RegisterChainManagerFunc: method is nil but OrchestratorServer.RegisterChainManager was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *grpc.RegisterChainManagerRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockOrchestratorServerMockRegisterChainManager.Lock()
	mock.calls.RegisterChainManager = append(mock.calls.RegisterChainManager, callInfo)
	lockOrchestratorServerMockRegisterChainManager.Unlock()
	return mock.RegisterChainManagerFunc(in1, in2)
}

// RegisterChainManagerCalls gets all the calls that were made to RegisterChainManager.
// Check the length with:
//     len(mockedOrchestratorServer.RegisterChainManagerCalls())
func (mock *OrchestratorServerMock) RegisterChainManagerCalls() []struct {
	In1 context.Context
	In2 *grpc.RegisterChainManagerRequest
} {
	var calls []struct {
		In1 context.Context
		In2 *grpc.RegisterChainManagerRequest
	}
	lockOrchestratorServerMockRegisterChainManager.RLock()
	calls = mock.calls.RegisterChainManager
	lockOrchestratorServerMockRegisterChainManager.RUnlock()
	return calls
}

// RenewLease calls RenewLeaseFunc.
func (mock *OrchestratorServerMock) RenewLease(in1 context.Context, in2 *grpc.RenewLeaseRequest) (*grpc.Lease, error) {
	if mock.RenewLeaseFunc == nil {
		panic("OrchestratorServerMock.RenewLeaseFunc: method is nil but OrchestratorServer.RenewLease was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *grpc.RenewLeaseRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockOrchestratorServerMockRenewLease.Lock()
	mock.calls.RenewLease = append(mock.calls.RenewLease, callInfo)
	lockOrchestratorServerMockRenewLease.Unlock()
	return mock.RenewLeaseFunc(in1, in2)
}

// RenewLeaseCalls gets all the calls that were made to RenewLease.
// Check the length with:
//     len(mockedOrchestratorServer.RenewLeaseCalls())
func (mock *OrchestratorServerMock) RenewLeaseCalls() []struct {
	In1 context.Context
	In2 *grpc.RenewLeaseRequest
} {
	var calls []struct {
		In1 context.Context
		In2 *grpc.RenewLeaseRequest
	}
	lockOrchestratorServerMockRenewLease.RLock()
	calls = mock.calls.RenewLease
	lockOrchestratorServerMockRenewLease.RUnlock()
	return calls
}

// ReportBlockEvents calls ReportBlockEventsFunc.
func (mock *OrchestratorServerMock) ReportBlockEvents(in1 grpc.Orchestrator_ReportBlockEventsServer) error {
	if mock.ReportBlockEventsFunc == nil {
		panic("OrchestratorServerMock.ReportBlockEventsFunc: method is nil but OrchestratorServer.ReportBlockEvents was just called")
	}
	callInfo := struct {
		In1 grpc.Orchestrator_ReportBlockEventsServer
	}{
		In1: in1,
	}
	lockOrchestratorServerMockReportBlockEvents.Lock()
	mock.calls.ReportBlockEvents = append(mock.calls.ReportBlockEvents, callInfo)
	lockOrchestratorServerMockReportBlockEvents.Unlock()
	return mock.ReportBlockEventsFunc(in1)
}

// ReportBlockEventsCalls gets all the calls that were made to ReportBlockEvents.
// Check the length with:
//     len(mockedOrchestratorServer.ReportBlockEventsCalls())
func (mock *OrchestratorServerMock) ReportBlockEventsCalls() []struct {
	In1 grpc.Orchestrator_ReportBlockEventsServer
} {
	var calls []struct {
		In1 grpc.Orchestrator_ReportBlockEventsServer
	}
	lockOrchestratorServerMockReportBlockEvents.RLock()
	calls = mock.calls.ReportBlockEvents
	lockOrchestratorServerMockReportBlockEvents.RUnlock()
	return calls
}

// UnregsiterChainManager calls UnregsiterChainManagerFunc.
func (mock *OrchestratorServerMock) UnregsiterChainManager(in1 context.Context, in2 *grpc.UnregisterChainManagerRequest) (*empty.Empty, error) {
	if mock.UnregsiterChainManagerFunc == nil {
		panic("OrchestratorServerMock.UnregsiterChainManagerFunc: method is nil but OrchestratorServer.UnregsiterChainManager was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *grpc.UnregisterChainManagerRequest
	}{
		In1: in1,
		In2: in2,
	}
	lockOrchestratorServerMockUnregsiterChainManager.Lock()
	mock.calls.UnregsiterChainManager = append(mock.calls.UnregsiterChainManager, callInfo)
	lockOrchestratorServerMockUnregsiterChainManager.Unlock()
	return mock.UnregsiterChainManagerFunc(in1, in2)
}

// UnregsiterChainManagerCalls gets all the calls that were made to UnregsiterChainManager.
// Check the length with:
//     len(mockedOrchestratorServer.UnregsiterChainManagerCalls())
func (mock *OrchestratorServerMock) UnregsiterChainManagerCalls() []struct {
	In1 context.Context
	In2 *grpc.UnregisterChainManagerRequest
} {
	var calls []struct {
		In1 context.Context
		In2 *grpc.UnregisterChainManagerRequest
	}
	lockOrchestratorServerMockUnregsiterChainManager.RLock()
	calls = mock.calls.UnregsiterChainManager
	lockOrchestratorServerMockUnregsiterChainManager.RUnlock()
	return calls
}
