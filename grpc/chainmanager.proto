syntax = "proto3";

package grpc;

import "google/protobuf/empty.proto";
import "orchestrator.proto";


// ChainManager manages a single chain.
// It needs to register with a FlowManager to be told what to monitor for.
service ChainManager {
    // SetMonitors resets ChainManager's current MonitorSet.
    // The request stream must begin with a valid Preflight, followed by zero or more Monitors.
    rpc SetMonitors(stream SetMonitorsRequest) returns (google.protobuf.Empty);

    // UpdateMonitors patches ChainManager's current MonitorSet with additions and removals.
    // The request stream must begin with a valid Preflight, followed by zero or more AddMonitor or RemoveMonitor requests.
    // The MonitorSetVersion in Preflight must be exactly the local version plus one.
    rpc UpdateMonitors(stream UpdateMonitorsRequest) returns (google.protobuf.Empty);
}

message SetMonitorsRequest {
    message Preflight {
        // SessionId must match the one specified in RegisterChainManagerRequest.
        bytes session_id = 1;

        // MonitorSetVersion is the version of the new MonitorSet.
        // It must be greater than ChainManager's local version.
        uint32 monitor_set_version = 2;

        // ResumeAfter identifies the block after which the new MonitorSet should be applied.
        // If this is a known block (in the past), ChainManager should do a rewind and start reporting again.
        // Otherwise, ChainManager should apply the MonitorSet to the next incoming block.
        BlockSpec resume_after = 3;
    }

    oneof msg_type {
        Preflight preflight = 1;
        Monitor monitor = 2;
    }
}

message UpdateMonitorsRequest {
    message Preflight {
        // SessionId must match the one specified in RegisterChainManagerRequest.
        bytes session_id = 1;

        // PreviousMonitorSetVersion is the version of the previous MonitorSet.
        // It must match ChainManager's local version.
        uint32 previous_monitor_set_version = 2;

        // MonitorSetVersion is the version of the new MonitorSet.
        // It must be greater than PreviousMonitorSetVersion.
        uint32 monitor_set_version = 3;

        // ResumeAfter identifies the block after which the new MonitorSet should be applied.
        // If this is a known block (in the past), ChainManager should do a rewind and start reporting again.
        // Otherwise, ChainManager should apply the MonitorSet to the next incoming block.
        BlockSpec resume_after = 4;
    }

    message AddMonitor {
        Monitor monitor = 1;
    }

    message RemoveMonitor {
        bytes monitor_id = 1;
    }

    oneof msg_type {
        Preflight preflight = 1;
        AddMonitor add_monitor = 2;
        RemoveMonitor remove_monitor = 3;
    }
}
