// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/mblockapi.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protos "github.com/megaspacelab/megaconnect/protos"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MBlockByHeightRequest struct {
	Height               int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MBlockByHeightRequest) Reset()         { *m = MBlockByHeightRequest{} }
func (m *MBlockByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*MBlockByHeightRequest) ProtoMessage()    {}
func (*MBlockByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb9b5b67f9426981, []int{0}
}

func (m *MBlockByHeightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MBlockByHeightRequest.Unmarshal(m, b)
}
func (m *MBlockByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MBlockByHeightRequest.Marshal(b, m, deterministic)
}
func (m *MBlockByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MBlockByHeightRequest.Merge(m, src)
}
func (m *MBlockByHeightRequest) XXX_Size() int {
	return xxx_messageInfo_MBlockByHeightRequest.Size(m)
}
func (m *MBlockByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MBlockByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MBlockByHeightRequest proto.InternalMessageInfo

func (m *MBlockByHeightRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*MBlockByHeightRequest)(nil), "grpc.MBlockByHeightRequest")
}

func init() { proto.RegisterFile("grpc/mblockapi.proto", fileDescriptor_cb9b5b67f9426981) }

var fileDescriptor_cb9b5b67f9426981 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0x86, 0x59, 0x94, 0x03, 0x83, 0x9c, 0x10, 0xf5, 0x90, 0xbd, 0x46, 0xac, 0x0e, 0x8b, 0x89,
	0x28, 0xd8, 0x88, 0x85, 0x0b, 0x82, 0x85, 0x36, 0x67, 0x67, 0x97, 0x84, 0x31, 0x1b, 0xdc, 0x5c,
	0xe2, 0x66, 0x52, 0xdc, 0xd3, 0xf9, 0x6a, 0x92, 0x64, 0x2d, 0x14, 0x9b, 0x2b, 0xff, 0xef, 0x9f,
	0xc9, 0x37, 0x61, 0x27, 0x66, 0x0c, 0x5a, 0x38, 0x35, 0x78, 0xfd, 0x21, 0x83, 0x85, 0x30, 0x7a,
	0xf2, 0x7c, 0x3f, 0xd3, 0xf6, 0xb8, 0x84, 0x38, 0xb5, 0xb5, 0x6a, 0x97, 0xc6, 0x7b, 0x33, 0xa0,
	0x28, 0x49, 0xa5, 0x77, 0x81, 0x2e, 0xd0, 0xb6, 0x96, 0x17, 0x82, 0x9d, 0xbe, 0x74, 0x79, 0xb8,
	0xdb, 0x3e, 0xa1, 0x35, 0x3d, 0xad, 0xf1, 0x33, 0x61, 0x24, 0xbe, 0x60, 0xb3, 0xbe, 0x80, 0xb3,
	0xe6, 0xbc, 0x59, 0xed, 0xad, 0xa7, 0x74, 0xfd, 0xd5, 0xb0, 0x83, 0xba, 0xf1, 0x10, 0x2c, 0xbf,
	0x63, 0x47, 0xaf, 0x49, 0x45, 0x3d, 0x5a, 0x85, 0x95, 0xf2, 0x05, 0x54, 0x1f, 0xfc, 0xf8, 0xe0,
	0x31, 0xfb, 0xda, 0x79, 0x05, 0x11, 0xea, 0xdc, 0x55, 0xc3, 0xef, 0xd9, 0xfc, 0xb7, 0x9b, 0x2f,
	0x21, 0x7f, 0x03, 0xfe, 0xbd, 0xe8, 0xef, 0x03, 0xfc, 0x96, 0x1d, 0x3e, 0x4b, 0xc2, 0x48, 0xbb,
	0x89, 0xbb, 0xcb, 0xb7, 0x95, 0xb1, 0xd4, 0x27, 0x05, 0xda, 0x3b, 0xe1, 0xd0, 0xc8, 0x18, 0xa4,
	0xc6, 0x41, 0xaa, 0x12, 0xb4, 0xdf, 0x6c, 0x50, 0x93, 0xc8, 0x97, 0xa8, 0x59, 0x59, 0xbd, 0xf9,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xcf, 0xea, 0x23, 0x75, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MBlockApiClient is the client API for MBlockApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MBlockApiClient interface {
	// SubscribeMBlock subscribes to new blocks from megaspace network.
	SubscribeMBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MBlockApi_SubscribeMBlockClient, error)
	// MBlockByHeight gets the mblock by height.
	MBlockByHeight(ctx context.Context, in *MBlockByHeightRequest, opts ...grpc.CallOption) (*protos.MBlock, error)
	// LatestMBlock gets the latest mblock.
	LatestMBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protos.MBlock, error)
}

type mBlockApiClient struct {
	cc *grpc.ClientConn
}

func NewMBlockApiClient(cc *grpc.ClientConn) MBlockApiClient {
	return &mBlockApiClient{cc}
}

func (c *mBlockApiClient) SubscribeMBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MBlockApi_SubscribeMBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MBlockApi_serviceDesc.Streams[0], "/grpc.MBlockApi/SubscribeMBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &mBlockApiSubscribeMBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MBlockApi_SubscribeMBlockClient interface {
	Recv() (*protos.MBlock, error)
	grpc.ClientStream
}

type mBlockApiSubscribeMBlockClient struct {
	grpc.ClientStream
}

func (x *mBlockApiSubscribeMBlockClient) Recv() (*protos.MBlock, error) {
	m := new(protos.MBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mBlockApiClient) MBlockByHeight(ctx context.Context, in *MBlockByHeightRequest, opts ...grpc.CallOption) (*protos.MBlock, error) {
	out := new(protos.MBlock)
	err := c.cc.Invoke(ctx, "/grpc.MBlockApi/MBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mBlockApiClient) LatestMBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protos.MBlock, error) {
	out := new(protos.MBlock)
	err := c.cc.Invoke(ctx, "/grpc.MBlockApi/LatestMBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MBlockApiServer is the server API for MBlockApi service.
type MBlockApiServer interface {
	// SubscribeMBlock subscribes to new blocks from megaspace network.
	SubscribeMBlock(*empty.Empty, MBlockApi_SubscribeMBlockServer) error
	// MBlockByHeight gets the mblock by height.
	MBlockByHeight(context.Context, *MBlockByHeightRequest) (*protos.MBlock, error)
	// LatestMBlock gets the latest mblock.
	LatestMBlock(context.Context, *empty.Empty) (*protos.MBlock, error)
}

func RegisterMBlockApiServer(s *grpc.Server, srv MBlockApiServer) {
	s.RegisterService(&_MBlockApi_serviceDesc, srv)
}

func _MBlockApi_SubscribeMBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MBlockApiServer).SubscribeMBlock(m, &mBlockApiSubscribeMBlockServer{stream})
}

type MBlockApi_SubscribeMBlockServer interface {
	Send(*protos.MBlock) error
	grpc.ServerStream
}

type mBlockApiSubscribeMBlockServer struct {
	grpc.ServerStream
}

func (x *mBlockApiSubscribeMBlockServer) Send(m *protos.MBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _MBlockApi_MBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MBlockApiServer).MBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MBlockApi/MBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MBlockApiServer).MBlockByHeight(ctx, req.(*MBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MBlockApi_LatestMBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MBlockApiServer).LatestMBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MBlockApi/LatestMBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MBlockApiServer).LatestMBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MBlockApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MBlockApi",
	HandlerType: (*MBlockApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MBlockByHeight",
			Handler:    _MBlockApi_MBlockByHeight_Handler,
		},
		{
			MethodName: "LatestMBlock",
			Handler:    _MBlockApi_LatestMBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMBlock",
			Handler:       _MBlockApi_SubscribeMBlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/mblockapi.proto",
}
