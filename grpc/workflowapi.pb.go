// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/workflowapi.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployWorkflowRequest struct {
	// Payload is the binary representation of the workflow
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployWorkflowRequest) Reset()         { *m = DeployWorkflowRequest{} }
func (m *DeployWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*DeployWorkflowRequest) ProtoMessage()    {}
func (*DeployWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c4a6aae0f7a51, []int{0}
}

func (m *DeployWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployWorkflowRequest.Unmarshal(m, b)
}
func (m *DeployWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *DeployWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployWorkflowRequest.Merge(m, src)
}
func (m *DeployWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_DeployWorkflowRequest.Size(m)
}
func (m *DeployWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployWorkflowRequest proto.InternalMessageInfo

func (m *DeployWorkflowRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UndeployWorkflowRequest struct {
	// WorkflowId is the ID of workflow that needs to be undeployed
	WorkflowId           []byte   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndeployWorkflowRequest) Reset()         { *m = UndeployWorkflowRequest{} }
func (m *UndeployWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*UndeployWorkflowRequest) ProtoMessage()    {}
func (*UndeployWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c4a6aae0f7a51, []int{1}
}

func (m *UndeployWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UndeployWorkflowRequest.Unmarshal(m, b)
}
func (m *UndeployWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UndeployWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *UndeployWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndeployWorkflowRequest.Merge(m, src)
}
func (m *UndeployWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_UndeployWorkflowRequest.Size(m)
}
func (m *UndeployWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UndeployWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UndeployWorkflowRequest proto.InternalMessageInfo

func (m *UndeployWorkflowRequest) GetWorkflowId() []byte {
	if m != nil {
		return m.WorkflowId
	}
	return nil
}

type DeployWorkflowResponse struct {
	// WorkflowId is the ID of the deployed workflow
	WorkflowId           []byte   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployWorkflowResponse) Reset()         { *m = DeployWorkflowResponse{} }
func (m *DeployWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*DeployWorkflowResponse) ProtoMessage()    {}
func (*DeployWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c4a6aae0f7a51, []int{2}
}

func (m *DeployWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployWorkflowResponse.Unmarshal(m, b)
}
func (m *DeployWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployWorkflowResponse.Marshal(b, m, deterministic)
}
func (m *DeployWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployWorkflowResponse.Merge(m, src)
}
func (m *DeployWorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_DeployWorkflowResponse.Size(m)
}
func (m *DeployWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeployWorkflowResponse proto.InternalMessageInfo

func (m *DeployWorkflowResponse) GetWorkflowId() []byte {
	if m != nil {
		return m.WorkflowId
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployWorkflowRequest)(nil), "grpc.DeployWorkflowRequest")
	proto.RegisterType((*UndeployWorkflowRequest)(nil), "grpc.UndeployWorkflowRequest")
	proto.RegisterType((*DeployWorkflowResponse)(nil), "grpc.DeployWorkflowResponse")
}

func init() { proto.RegisterFile("grpc/workflowapi.proto", fileDescriptor_e18c4a6aae0f7a51) }

var fileDescriptor_e18c4a6aae0f7a51 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0xcf, 0x2f, 0xca, 0x4e, 0xcb, 0xc9, 0x2f, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x01, 0x89, 0x4b, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83,
	0xc5, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x4a, 0x94, 0x0c, 0xb9, 0x44,
	0x5d, 0x52, 0x0b, 0x72, 0xf2, 0x2b, 0xc3, 0xa1, 0xba, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0x24, 0xb8, 0xd8, 0x0b, 0x12, 0x2b, 0x73, 0xf2, 0x13, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x78, 0x82, 0x60, 0x5c, 0x25, 0x2b, 0x2e, 0xf1, 0xd0, 0xbc, 0x14, 0xac, 0x9a, 0xe4, 0xb9, 0xb8,
	0x61, 0xae, 0x88, 0xcf, 0x84, 0x69, 0xe4, 0x82, 0x09, 0x79, 0xa6, 0x28, 0x59, 0x72, 0x89, 0xa1,
	0x5b, 0x57, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x4a, 0x50, 0xab, 0xd1, 0x52, 0x46, 0x2e, 0x6e, 0x98,
	0x2e, 0xc7, 0x82, 0x4c, 0x21, 0x6f, 0x2e, 0x3e, 0x54, 0xa3, 0x84, 0xa4, 0xf5, 0x40, 0xfe, 0xd5,
	0xc3, 0xea, 0x1f, 0x29, 0x19, 0xec, 0x92, 0x50, 0xdb, 0x3d, 0xb9, 0x04, 0xd0, 0xfd, 0x24, 0x24,
	0x0b, 0xd1, 0x81, 0xc3, 0xaf, 0x52, 0x62, 0x7a, 0x90, 0x70, 0xd5, 0x83, 0x85, 0xab, 0x9e, 0x2b,
	0x28, 0x5c, 0x9d, 0xb4, 0xa2, 0x34, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73,
	0xf5, 0x73, 0x53, 0xd3, 0x13, 0x8b, 0x0b, 0x12, 0x93, 0x53, 0x73, 0x12, 0x93, 0xc0, 0x9c, 0xe4,
	0xfc, 0xbc, 0xbc, 0xd4, 0xe4, 0x12, 0x7d, 0x90, 0xd9, 0x49, 0x6c, 0x60, 0xbd, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0x72, 0x08, 0xc9, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowApiClient is the client API for WorkflowApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowApiClient interface {
	// DeployWorkflow deploys a workflow to the network.
	DeployWorkflow(ctx context.Context, in *DeployWorkflowRequest, opts ...grpc.CallOption) (*DeployWorkflowResponse, error)
	// UndeployWorkflow undeploys a workflow from the network.
	UndeployWorkflow(ctx context.Context, in *UndeployWorkflowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workflowApiClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowApiClient(cc *grpc.ClientConn) WorkflowApiClient {
	return &workflowApiClient{cc}
}

func (c *workflowApiClient) DeployWorkflow(ctx context.Context, in *DeployWorkflowRequest, opts ...grpc.CallOption) (*DeployWorkflowResponse, error) {
	out := new(DeployWorkflowResponse)
	err := c.cc.Invoke(ctx, "/grpc.WorkflowApi/DeployWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowApiClient) UndeployWorkflow(ctx context.Context, in *UndeployWorkflowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpc.WorkflowApi/UndeployWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowApiServer is the server API for WorkflowApi service.
type WorkflowApiServer interface {
	// DeployWorkflow deploys a workflow to the network.
	DeployWorkflow(context.Context, *DeployWorkflowRequest) (*DeployWorkflowResponse, error)
	// UndeployWorkflow undeploys a workflow from the network.
	UndeployWorkflow(context.Context, *UndeployWorkflowRequest) (*empty.Empty, error)
}

func RegisterWorkflowApiServer(s *grpc.Server, srv WorkflowApiServer) {
	s.RegisterService(&_WorkflowApi_serviceDesc, srv)
}

func _WorkflowApi_DeployWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApiServer).DeployWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.WorkflowApi/DeployWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).DeployWorkflow(ctx, req.(*DeployWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_UndeployWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApiServer).UndeployWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.WorkflowApi/UndeployWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).UndeployWorkflow(ctx, req.(*UndeployWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.WorkflowApi",
	HandlerType: (*WorkflowApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployWorkflow",
			Handler:    _WorkflowApi_DeployWorkflow_Handler,
		},
		{
			MethodName: "UndeployWorkflow",
			Handler:    _WorkflowApi_UndeployWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/workflowapi.proto",
}
