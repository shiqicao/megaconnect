// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/common.proto

package grpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protos "github.com/megaspacelab/megaconnect/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Monitor describes some state to be monitored on a connected chain.
type Monitor struct {
	WorkflowId           []byte   `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	MonitorName          string   `protobuf:"bytes,2,opt,name=monitor_name,json=monitorName,proto3" json:"monitor_name,omitempty"`
	Monitor              []byte   `protobuf:"bytes,3,opt,name=monitor,proto3" json:"monitor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Monitor) Reset()         { *m = Monitor{} }
func (m *Monitor) String() string { return proto.CompactTextString(m) }
func (*Monitor) ProtoMessage()    {}
func (*Monitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_15ffd973e4ddb270, []int{0}
}

func (m *Monitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Monitor.Unmarshal(m, b)
}
func (m *Monitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Monitor.Marshal(b, m, deterministic)
}
func (m *Monitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monitor.Merge(m, src)
}
func (m *Monitor) XXX_Size() int {
	return xxx_messageInfo_Monitor.Size(m)
}
func (m *Monitor) XXX_DiscardUnknown() {
	xxx_messageInfo_Monitor.DiscardUnknown(m)
}

var xxx_messageInfo_Monitor proto.InternalMessageInfo

func (m *Monitor) GetWorkflowId() []byte {
	if m != nil {
		return m.WorkflowId
	}
	return nil
}

func (m *Monitor) GetMonitorName() string {
	if m != nil {
		return m.MonitorName
	}
	return ""
}

func (m *Monitor) GetMonitor() []byte {
	if m != nil {
		return m.Monitor
	}
	return nil
}

// MonitorSet is a versioned set of monitors.
type MonitorSet struct {
	// Monitors contain all things to be monitored by the requesting ChainManager.
	Monitors []*Monitor `protobuf:"bytes,1,rep,name=monitors,proto3" json:"monitors,omitempty"`
	// Version is used for Orchestrator and ChainManager to agree on the set of monitors evaluated on each block.
	Version              uint32   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorSet) Reset()         { *m = MonitorSet{} }
func (m *MonitorSet) String() string { return proto.CompactTextString(m) }
func (*MonitorSet) ProtoMessage()    {}
func (*MonitorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_15ffd973e4ddb270, []int{1}
}

func (m *MonitorSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorSet.Unmarshal(m, b)
}
func (m *MonitorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorSet.Marshal(b, m, deterministic)
}
func (m *MonitorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorSet.Merge(m, src)
}
func (m *MonitorSet) XXX_Size() int {
	return xxx_messageInfo_MonitorSet.Size(m)
}
func (m *MonitorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorSet.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorSet proto.InternalMessageInfo

func (m *MonitorSet) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

func (m *MonitorSet) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// BlockSpec is used to specify a block to be looked up.
// While Hash is the most accurate specification, when not available, Height can be used instead.
type BlockSpec struct {
	Hash                 []byte         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height               *protos.BigInt `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BlockSpec) Reset()         { *m = BlockSpec{} }
func (m *BlockSpec) String() string { return proto.CompactTextString(m) }
func (*BlockSpec) ProtoMessage()    {}
func (*BlockSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_15ffd973e4ddb270, []int{2}
}

func (m *BlockSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockSpec.Unmarshal(m, b)
}
func (m *BlockSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockSpec.Marshal(b, m, deterministic)
}
func (m *BlockSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockSpec.Merge(m, src)
}
func (m *BlockSpec) XXX_Size() int {
	return xxx_messageInfo_BlockSpec.Size(m)
}
func (m *BlockSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BlockSpec proto.InternalMessageInfo

func (m *BlockSpec) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockSpec) GetHeight() *protos.BigInt {
	if m != nil {
		return m.Height
	}
	return nil
}

func init() {
	proto.RegisterType((*Monitor)(nil), "grpc.Monitor")
	proto.RegisterType((*MonitorSet)(nil), "grpc.MonitorSet")
	proto.RegisterType((*BlockSpec)(nil), "grpc.BlockSpec")
}

func init() { proto.RegisterFile("grpc/common.proto", fileDescriptor_15ffd973e4ddb270) }

var fileDescriptor_15ffd973e4ddb270 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x5a, 0xb5, 0xf4, 0xd2, 0x22, 0x61, 0x96, 0x88, 0x85, 0x92, 0x01, 0x05, 0x86,
	0x44, 0x2a, 0xff, 0x20, 0x0b, 0xea, 0x00, 0x12, 0xe9, 0xc6, 0x52, 0x39, 0xae, 0xb1, 0xad, 0xc6,
	0xbe, 0xc8, 0x36, 0xf4, 0xef, 0xa3, 0x38, 0x0e, 0x9b, 0xbf, 0xf7, 0xee, 0xee, 0x3d, 0xc3, 0xad,
	0xb0, 0x3d, 0xab, 0x18, 0x6a, 0x8d, 0xa6, 0xec, 0x2d, 0x7a, 0x24, 0xf3, 0x41, 0xba, 0xbf, 0x0b,
	0xe0, 0xaa, 0x56, 0x09, 0x65, 0xfc, 0x68, 0xe5, 0x02, 0x96, 0xef, 0x68, 0x94, 0x47, 0x4b, 0x1e,
	0x20, 0xbd, 0xa0, 0x3d, 0x7f, 0x77, 0x78, 0x39, 0xaa, 0x53, 0x96, 0x6c, 0x93, 0x62, 0xdd, 0xc0,
	0x24, 0xed, 0x4f, 0xe4, 0x11, 0xd6, 0x7a, 0x9c, 0x3d, 0x1a, 0xaa, 0x79, 0x76, 0xb5, 0x4d, 0x8a,
	0x55, 0x93, 0x46, 0xed, 0x83, 0x6a, 0x4e, 0x32, 0x58, 0x46, 0xcc, 0x66, 0x61, 0x7f, 0xc2, 0xfc,
	0x13, 0x20, 0x06, 0x1d, 0xb8, 0x27, 0xcf, 0x70, 0x1d, 0x0d, 0x97, 0x25, 0xdb, 0x59, 0x91, 0xee,
	0x36, 0xe5, 0x50, 0xb2, 0x8c, 0x33, 0xcd, 0xbf, 0x3d, 0x9c, 0xfc, 0xe5, 0xd6, 0x29, 0x34, 0x21,
	0x70, 0xd3, 0x4c, 0x98, 0xbf, 0xc1, 0xaa, 0xee, 0x90, 0x9d, 0x0f, 0x3d, 0x67, 0x84, 0xc0, 0x5c,
	0x52, 0x27, 0x63, 0xed, 0xf0, 0x26, 0x4f, 0xb0, 0x90, 0x5c, 0x09, 0xe9, 0xc3, 0x66, 0xba, 0xbb,
	0x19, 0x3f, 0xed, 0xca, 0x5a, 0x89, 0xbd, 0xf1, 0x4d, 0x74, 0xeb, 0x97, 0xaf, 0x42, 0x28, 0x2f,
	0x7f, 0xda, 0x92, 0xa1, 0xae, 0x34, 0x17, 0xd4, 0xf5, 0x94, 0xf1, 0x8e, 0xb6, 0x01, 0x18, 0x1a,
	0xc3, 0x99, 0xaf, 0x86, 0x82, 0xed, 0x22, 0x9c, 0x78, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xbe,
	0x57, 0x5f, 0x34, 0x67, 0x01, 0x00, 0x00,
}
