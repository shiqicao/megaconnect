// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package flowmanager

import (
	"github.com/megaspacelab/megaconnect/grpc"
	"sync"
)

var (
	lockChainManagerServerMockSetMonitors    sync.RWMutex
	lockChainManagerServerMockUpdateMonitors sync.RWMutex
)

// ChainManagerServerMock is a mock implementation of ChainManagerServer.
//
//     func TestSomethingThatUsesChainManagerServer(t *testing.T) {
//
//         // make and configure a mocked ChainManagerServer
//         mockedChainManagerServer := &ChainManagerServerMock{
//             SetMonitorsFunc: func(in1 grpc.ChainManager_SetMonitorsServer) error {
// 	               panic("TODO: mock out the SetMonitors method")
//             },
//             UpdateMonitorsFunc: func(in1 grpc.ChainManager_UpdateMonitorsServer) error {
// 	               panic("TODO: mock out the UpdateMonitors method")
//             },
//         }
//
//         // TODO: use mockedChainManagerServer in code that requires ChainManagerServer
//         //       and then make assertions.
//
//     }
type ChainManagerServerMock struct {
	// SetMonitorsFunc mocks the SetMonitors method.
	SetMonitorsFunc func(in1 grpc.ChainManager_SetMonitorsServer) error

	// UpdateMonitorsFunc mocks the UpdateMonitors method.
	UpdateMonitorsFunc func(in1 grpc.ChainManager_UpdateMonitorsServer) error

	// calls tracks calls to the methods.
	calls struct {
		// SetMonitors holds details about calls to the SetMonitors method.
		SetMonitors []struct {
			// In1 is the in1 argument value.
			In1 grpc.ChainManager_SetMonitorsServer
		}
		// UpdateMonitors holds details about calls to the UpdateMonitors method.
		UpdateMonitors []struct {
			// In1 is the in1 argument value.
			In1 grpc.ChainManager_UpdateMonitorsServer
		}
	}
}

// SetMonitors calls SetMonitorsFunc.
func (mock *ChainManagerServerMock) SetMonitors(in1 grpc.ChainManager_SetMonitorsServer) error {
	if mock.SetMonitorsFunc == nil {
		panic("ChainManagerServerMock.SetMonitorsFunc: method is nil but ChainManagerServer.SetMonitors was just called")
	}
	callInfo := struct {
		In1 grpc.ChainManager_SetMonitorsServer
	}{
		In1: in1,
	}
	lockChainManagerServerMockSetMonitors.Lock()
	mock.calls.SetMonitors = append(mock.calls.SetMonitors, callInfo)
	lockChainManagerServerMockSetMonitors.Unlock()
	return mock.SetMonitorsFunc(in1)
}

// SetMonitorsCalls gets all the calls that were made to SetMonitors.
// Check the length with:
//     len(mockedChainManagerServer.SetMonitorsCalls())
func (mock *ChainManagerServerMock) SetMonitorsCalls() []struct {
	In1 grpc.ChainManager_SetMonitorsServer
} {
	var calls []struct {
		In1 grpc.ChainManager_SetMonitorsServer
	}
	lockChainManagerServerMockSetMonitors.RLock()
	calls = mock.calls.SetMonitors
	lockChainManagerServerMockSetMonitors.RUnlock()
	return calls
}

// UpdateMonitors calls UpdateMonitorsFunc.
func (mock *ChainManagerServerMock) UpdateMonitors(in1 grpc.ChainManager_UpdateMonitorsServer) error {
	if mock.UpdateMonitorsFunc == nil {
		panic("ChainManagerServerMock.UpdateMonitorsFunc: method is nil but ChainManagerServer.UpdateMonitors was just called")
	}
	callInfo := struct {
		In1 grpc.ChainManager_UpdateMonitorsServer
	}{
		In1: in1,
	}
	lockChainManagerServerMockUpdateMonitors.Lock()
	mock.calls.UpdateMonitors = append(mock.calls.UpdateMonitors, callInfo)
	lockChainManagerServerMockUpdateMonitors.Unlock()
	return mock.UpdateMonitorsFunc(in1)
}

// UpdateMonitorsCalls gets all the calls that were made to UpdateMonitors.
// Check the length with:
//     len(mockedChainManagerServer.UpdateMonitorsCalls())
func (mock *ChainManagerServerMock) UpdateMonitorsCalls() []struct {
	In1 grpc.ChainManager_UpdateMonitorsServer
} {
	var calls []struct {
		In1 grpc.ChainManager_UpdateMonitorsServer
	}
	lockChainManagerServerMockUpdateMonitors.RLock()
	calls = mock.calls.UpdateMonitors
	lockChainManagerServerMockUpdateMonitors.RUnlock()
	return calls
}
