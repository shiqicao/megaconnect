// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"bytes"
	"compress/gzip"
	"encoding/gob"
)

const numNTSymbols = 33

type (
	gotoTable [numStates]gotoRow
	gotoRow   [numNTSymbols]int
)

var gotoTab = gotoTable{}

func init() {
	tab := [][]int{}
	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xec, 0xd9, 0x5f, 0x68, 0x1c, 0x55,
		0x14, 0x06, 0xf0, 0xf9, 0xce, 0x04, 0x29, 0xa5, 0x96, 0x10, 0x4a, 0x1f, 0xc5, 0x42, 0x11, 0x91,
		0x12, 0xa4, 0x04, 0x91, 0xb2, 0x04, 0x29, 0xa5, 0x2c, 0x41, 0x7c, 0x28, 0x45, 0x24, 0x48, 0xe8,
		0x43, 0x29, 0x22, 0x65, 0x91, 0x22, 0x22, 0x22, 0xe2, 0x83, 0x0f, 0x75, 0x5d, 0x24, 0x2c, 0x4b,
		0xf1, 0x49, 0x4a, 0x11, 0x91, 0xa5, 0x14, 0x11, 0x11, 0x29, 0x22, 0x22, 0x22, 0xe2, 0xa3, 0x88,
		0x94, 0x22, 0xa1, 0x4f, 0x52, 0x8a, 0x04, 0x91, 0x10, 0xc4, 0x87, 0xef, 0xca, 0x6e, 0x66, 0x77,
		0xf3, 0x67, 0x27, 0xf7, 0x9c, 0xd9, 0x9d, 0xd9, 0x59, 0x7b, 0xe7, 0x21, 0x93, 0x90, 0xdf, 0x9c,
		0x7b, 0x72, 0x77, 0xee, 0x99, 0x73, 0x27, 0x8f, 0xba, 0x0f, 0x04, 0xe2, 0x1a, 0x11, 0x5c, 0x3d,
		0x8a, 0x0e, 0xb9, 0xf7, 0x3b, 0x3f, 0xd5, 0x23, 0xcc, 0x44, 0x11, 0x2b, 0x2d, 0xd7, 0x88, 0x88,
		0xf6, 0x31, 0x08, 0xf6, 0x3f, 0x8e, 0x79, 0x7e, 0x3f, 0x36, 0x71, 0xd0, 0x1f, 0xe3, 0xf0, 0x2c,
		0xe6, 0x00, 0x1c, 0xc9, 0x35, 0x8f, 0x20, 0x72, 0x12, 0xf3, 0x38, 0xa1, 0x8a, 0x71, 0x72, 0x21,
		0xdf, 0x3c, 0x14, 0x62, 0xb1, 0x90, 0x51, 0x94, 0xa2, 0xba, 0xa4, 0x88, 0x71, 0xbe, 0xfb, 0xf5,
		0xdc, 0x4b, 0xcb, 0x2f, 0xaf, 0x5c, 0x78, 0x05, 0xa8, 0x5d, 0xde, 0x2d, 0xae, 0x14, 0x90, 0xa9,
		0x42, 0xbc, 0xe3, 0x15, 0xee, 0xdd, 0x42, 0x12, 0xf1, 0x0a, 0x77, 0x55, 0x33, 0xef, 0x0a, 0xe1,
		0x9a, 0x70, 0xab, 0x43, 0x8c, 0x6b, 0x99, 0xc2, 0x78, 0x85, 0xbb, 0xb1, 0x75, 0xba, 0xee, 0x3e,
		0x75, 0x9f, 0xb9, 0xb6, 0xbb, 0xe9, 0x6e, 0xb9, 0xaf, 0x80, 0x9a, 0xbb, 0x5d, 0xb6, 0x4a, 0xf0,
		0x30, 0x08, 0xf7, 0x9b, 0xa9, 0x34, 0xba, 0x3b, 0xb9, 0x65, 0x32, 0x5e, 0xe1, 0xee, 0xea, 0x82,
		0xb8, 0xdf, 0xf3, 0xce, 0xa4, 0x37, 0xd0, 0x9a, 0x9f, 0xdc, 0x2b, 0x24, 0x13, 0xc0, 0x3d, 0xd8,
		0x3a, 0xdd, 0x77, 0xeb, 0xee, 0x2f, 0xf7, 0xb7, 0xdb, 0x70, 0x9b, 0x8e, 0x20, 0x66, 0x6a, 0x84,
		0x4c, 0xec, 0x93, 0xe4, 0xee, 0xde, 0x2a, 0x97, 0x71, 0xce, 0xf7, 0x06, 0x9b, 0x4d, 0x7d, 0x06,
		0x0d, 0xcc, 0x5c, 0xba, 0x51, 0xe4, 0xe2, 0x9a, 0x20, 0x8e, 0x8e, 0x9a, 0xb0, 0x5f, 0x24, 0x15,
		0x95, 0x78, 0x2c, 0x94, 0xd4, 0x12, 0x88, 0x61, 0x25, 0x35, 0xb9, 0xa3, 0x40, 0x9c, 0xf2, 0xdd,
		0x75, 0x20, 0x2a, 0x0a, 0xb3, 0xa8, 0x30, 0xcf, 0x29, 0xcc, 0x69, 0x85, 0x39, 0xe3, 0x35, 0x20,
		0xce, 0x2a, 0x4c, 0xd5, 0x6b, 0x40, 0x2c, 0x29, 0xcc, 0xf3, 0xd9, 0x57, 0xe5, 0x34, 0x08, 0x62,
		0xb9, 0x24, 0x99, 0x68, 0x45, 0xb7, 0xd6, 0xad, 0x18, 0xc2, 0x10, 0x17, 0x47, 0xac, 0x76, 0x97,
		0x42, 0xb5, 0x2b, 0x81, 0x30, 0x35, 0x90, 0xfd, 0x83, 0xa8, 0x27, 0xe7, 0xab, 0xc4, 0x87, 0xc4,
		0x2a, 0xd1, 0x24, 0x5a, 0xc4, 0x35, 0xe2, 0x63, 0xa0, 0x46, 0xdc, 0x98, 0xe0, 0x9f, 0x47, 0xdc,
		0x24, 0xda, 0x79, 0x8f, 0x94, 0xd6, 0x85, 0xdd, 0xca, 0xd8, 0x85, 0x25, 0x0b, 0x03, 0xc4, 0x17,
		0xbe, 0x75, 0x31, 0xa0, 0x5f, 0x16, 0xb1, 0x84, 0x7a, 0xc3, 0x81, 0xf8, 0x5a, 0x97, 0x18, 0x88,
		0xdb, 0x6a, 0xf9, 0x8d, 0x5a, 0x7e, 0xab, 0x96, 0xdf, 0xa9, 0xe5, 0xf7, 0x4a, 0x09, 0xe2, 0x07,
		0x2d, 0xfc, 0x51, 0x07, 0x41, 0xfc, 0xa4, 0x74, 0x3f, 0x87, 0x22, 0x19, 0x84, 0xa5, 0x0a, 0xfd,
		0x3a, 0xd1, 0xbd, 0xa0, 0x4f, 0xa4, 0x65, 0x7d, 0x37, 0x6b, 0xed, 0xdc, 0x8a, 0x07, 0x62, 0x6d,
		0x5b, 0x3c, 0x0c, 0x8d, 0x36, 0xb0, 0xf7, 0xbc, 0xd6, 0x3f, 0xb2, 0x3e, 0x37, 0x10, 0x7f, 0x28,
		0x53, 0x03, 0x71, 0x5f, 0x4f, 0x1f, 0xe8, 0xe9, 0x9f, 0x7a, 0xba, 0xae, 0xa7, 0xda, 0x19, 0xef,
		0x58, 0xbd, 0xdc, 0x50, 0x4a, 0x10, 0x9b, 0x5a, 0xf8, 0x4f, 0xce, 0x9f, 0x75, 0x41, 0xa2, 0xd3,
		0xad, 0x8b, 0xe4, 0x3f, 0x50, 0xaf, 0x57, 0x97, 0x03, 0xa1, 0x57, 0x2f, 0x81, 0x18, 0xda, 0xab,
		0x53, 0x8e, 0xfb, 0xc2, 0x50, 0x9e, 0x1c, 0x53, 0x32, 0x94, 0xf9, 0x31, 0x44, 0x09, 0x22, 0x88,
		0xec, 0x22, 0xa5, 0x77, 0x90, 0x85, 0xdc, 0xaa, 0x3a, 0x65, 0x31, 0x39, 0x57, 0x28, 0xa7, 0x29,
		0x67, 0x28, 0x67, 0x29, 0x55, 0xca, 0x12, 0xe5, 0x5c, 0xe7, 0x69, 0x22, 0x2f, 0x96, 0x76, 0xb6,
		0xfc, 0x22, 0x99, 0x4f, 0xca, 0xf2, 0x8e, 0x09, 0x9d, 0xfa, 0x87, 0x64, 0x10, 0x3b, 0x8e, 0xb4,
		0x65, 0xb3, 0xb2, 0x5f, 0xd7, 0xb4, 0x47, 0x5f, 0xc8, 0x78, 0x57, 0xf4, 0x5e, 0x18, 0x81, 0x72,
		0x51, 0xf7, 0xba, 0x68, 0xdb, 0x15, 0x97, 0xc6, 0xf5, 0x82, 0xa9, 0x1f, 0x13, 0x94, 0x57, 0x2d,
		0x39, 0x80, 0x72, 0xd9, 0xe8, 0x6b, 0x46, 0xff, 0x9a, 0xd1, 0x5f, 0x31, 0xfa, 0xd7, 0x4d, 0x1e,
		0x94, 0x37, 0x4c, 0xfa, 0x4d, 0x83, 0x06, 0xe5, 0x2d, 0x83, 0x7d, 0xbb, 0x24, 0xaf, 0x15, 0x3d,
		0xa2, 0xdb, 0x94, 0xbf, 0x37, 0x6a, 0x18, 0x4a, 0x23, 0x39, 0xd7, 0x29, 0xab, 0x94, 0x26, 0xa5,
		0x45, 0xb9, 0x46, 0xf9, 0x88, 0x72, 0xbd, 0xfb, 0xac, 0xf9, 0xa4, 0xbc, 0x53, 0x50, 0x8c, 0xe8,
		0x4e, 0x74, 0x3b, 0xff, 0x81, 0xfa, 0xbb, 0x9f, 0xcf, 0xc3, 0xee, 0xa7, 0x04, 0x22, 0xdb, 0x7f,
		0x2a, 0x82, 0x08, 0x62, 0x1a, 0x44, 0x5a, 0xc3, 0xf5, 0x4b, 0x7e, 0x6d, 0x78, 0xb7, 0x8e, 0xde,
		0x19, 0x39, 0x8c, 0x57, 0xf4, 0xeb, 0xe8, 0x5a, 0xa8, 0xa3, 0x25, 0x10, 0xd9, 0xea, 0x68, 0xda,
		0xfd, 0xf9, 0x6f, 0xd6, 0x0d, 0x41, 0xb2, 0xa7, 0x06, 0x85, 0xba, 0x1d, 0xf5, 0xe0, 0x8a, 0x38,
		0x1a, 0xd7, 0x1e, 0xbc, 0x1f, 0x13, 0x8c, 0x67, 0x2c, 0x39, 0x80, 0xf1, 0x23, 0x46, 0x7f, 0xc0,
		0xe8, 0x0f, 0x1a, 0xfd, 0x21, 0xa3, 0x3f, 0x6c, 0xf2, 0x60, 0x3c, 0x6b, 0xd2, 0x73, 0x06, 0x0d,
		0xc6, 0x47, 0x0c, 0xf6, 0xe8, 0xff, 0xe4, 0xcd, 0x4b, 0x31, 0x22, 0x65, 0xe5, 0xc6, 0x8f, 0x67,
		0x5e, 0xb9, 0x8d, 0xe4, 0x9b, 0xf8, 0xb8, 0x6e, 0x7f, 0xb2, 0xed, 0x8a, 0x27, 0xc6, 0xb5, 0xa3,
		0xe9, 0xc7, 0x04, 0xe3, 0xa7, 0x2c, 0x39, 0x80, 0xf1, 0x09, 0xa3, 0x9f, 0x37, 0xfa, 0xa7, 0x8d,
		0xfe, 0xa4, 0xd1, 0x2f, 0x98, 0x3c, 0x18, 0x3f, 0x63, 0xd2, 0xcf, 0x1a, 0x34, 0x18, 0x9f, 0x32,
		0xd8, 0x4a, 0xd8, 0xc7, 0x06, 0x31, 0xf5, 0x22, 0xad, 0xa2, 0x56, 0xc3, 0x2b, 0xf3, 0x20, 0x26,
		0x22, 0xd2, 0xee, 0xc8, 0x17, 0xc2, 0x1d, 0xb9, 0xf7, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x1e,
		0xc2, 0x58, 0x2d, 0xb2, 0x3c, 0x00, 0x00,
	}
	buf, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		panic(err)
	}
	dec := gob.NewDecoder(buf)
	if err := dec.Decode(&tab); err != nil {
		panic(err)
	}
	for i := 0; i < numStates; i++ {
		for j := 0; j < numNTSymbols; j++ {
			gotoTab[i][j] = tab[i][j]
		}
	}
}
