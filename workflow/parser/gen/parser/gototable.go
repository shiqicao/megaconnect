// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"bytes"
	"compress/gzip"
	"encoding/gob"
)

const numNTSymbols = 29

type (
	gotoTable [numStates]gotoRow
	gotoRow   [numNTSymbols]int
)

var gotoTab = gotoTable{}

func init() {
	tab := [][]int{}
	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xec, 0x98, 0xc1, 0x4b, 0x14, 0x61,
		0x18, 0xc6, 0xe7, 0x19, 0xa4, 0x83, 0x98, 0x88, 0x44, 0xa7, 0x3c, 0x54, 0x20, 0x12, 0xb2, 0x2c,
		0xb2, 0x2c, 0x22, 0x22, 0xd1, 0x31, 0x16, 0x11, 0x11, 0xe9, 0x1c, 0x9d, 0xa3, 0x43, 0x2c, 0x1d,
		0xa3, 0x43, 0x90, 0x2d, 0xfd, 0x01, 0x11, 0x11, 0x11, 0x1d, 0x3a, 0x84, 0x48, 0x88, 0x44, 0x48,
		0x84, 0x44, 0x48, 0x84, 0x88, 0x88, 0x48, 0x74, 0x8e, 0x88, 0x90, 0x88, 0x88, 0x90, 0xe7, 0x8d,
		0xad, 0x59, 0x1d, 0x71, 0xfd, 0xe6, 0x71, 0x96, 0x99, 0x1d, 0x63, 0xbe, 0xc3, 0x7e, 0x2c, 0xbf,
		0xdf, 0xfb, 0xce, 0xbb, 0xb0, 0xef, 0xb7, 0xef, 0xb7, 0xc7, 0xed, 0xae, 0x0f, 0xdf, 0x6a, 0x1e,
		0x6c, 0xc6, 0xf3, 0xba, 0xec, 0x4e, 0xfd, 0xdd, 0x8c, 0x87, 0x0e, 0xcf, 0xe3, 0xd9, 0x2d, 0xab,
		0x79, 0xc4, 0xe9, 0x3e, 0xf8, 0x38, 0x78, 0xf5, 0x39, 0x58, 0xcb, 0xb4, 0xb3, 0xab, 0x1b, 0x3d,
		0x00, 0x7a, 0x9b, 0xc7, 0x9e, 0x72, 0xd2, 0xc4, 0xaa, 0xca, 0xe9, 0x21, 0x69, 0x11, 0x85, 0xe8,
		0xd8, 0x52, 0x39, 0xe5, 0xaa, 0x30, 0x96, 0x58, 0x66, 0x91, 0x56, 0xfe, 0xbe, 0x5e, 0x1c, 0x9f,
		0x98, 0x9c, 0x9a, 0xde, 0x47, 0x2f, 0xb7, 0xa7, 0xaa, 0xab, 0x4e, 0x7a, 0xad, 0xb5, 0xe7, 0x56,
		0x71, 0x7d, 0x2f, 0xbd, 0xa1, 0xc7, 0xe6, 0x34, 0xb4, 0xec, 0xc1, 0xbf, 0xed, 0xbe, 0x3d, 0xb4,
		0x47, 0xf6, 0xd8, 0x9e, 0xd8, 0xd3, 0xdd, 0x66, 0xb3, 0xd9, 0x36, 0x57, 0xd7, 0x8c, 0xda, 0x5c,
		0x64, 0xb0, 0x2d, 0xc0, 0xe6, 0x53, 0x2f, 0x4c, 0xa7, 0xb6, 0x98, 0x50, 0xea, 0x4a, 0x90, 0x7f,
		0xa9, 0xe9, 0x41, 0xb0, 0x83, 0xdf, 0x3a, 0x31, 0xec, 0x9d, 0x1b, 0x2f, 0xbb, 0xf1, 0x7b, 0x37,
		0xfe, 0xe0, 0xc6, 0x2b, 0x6e, 0xbc, 0xea, 0xc4, 0xb0, 0x35, 0x37, 0x5e, 0x77, 0x62, 0xd8, 0x86,
		0x1b, 0x6f, 0x36, 0xc1, 0xe1, 0x15, 0xe3, 0x1c, 0xb3, 0x4f, 0xb1, 0x83, 0x73, 0x1a, 0x5a, 0x8d,
		0x83, 0x6c, 0x7b, 0xff, 0x41, 0xd6, 0xd6, 0xe2, 0x88, 0x8e, 0xe8, 0x68, 0xa2, 0x2b, 0xd8, 0x3b,
		0x89, 0x6e, 0xa2, 0x87, 0xe8, 0x25, 0x4e, 0x10, 0x27, 0xd3, 0xfe, 0x0c, 0xc4, 0x00, 0xd1, 0x9f,
		0x54, 0xf6, 0x9c, 0x26, 0x4f, 0x83, 0x46, 0x00, 0x31, 0x78, 0x70, 0x23, 0xec, 0x4a, 0x85, 0xb8,
		0xdd, 0xd2, 0x48, 0x01, 0xa2, 0x18, 0xf5, 0x18, 0x10, 0x43, 0x82, 0x53, 0x12, 0x9c, 0xb2, 0xe0,
		0x0c, 0x0b, 0xce, 0x48, 0xa4, 0x03, 0x62, 0x34, 0x5a, 0x19, 0x8b, 0x52, 0x40, 0x9c, 0x8f, 0x34,
		0x2e, 0xa4, 0x7b, 0x5a, 0x11, 0xe3, 0xc1, 0x5e, 0x21, 0x26, 0x88, 0x49, 0x62, 0x8a, 0x98, 0x26,
		0x2e, 0xe9, 0x99, 0xb8, 0xf7, 0x62, 0x11, 0xaf, 0xca, 0x2a, 0x88, 0x2b, 0xb1, 0xa3, 0x73, 0x1a,
		0x5a, 0xc1, 0xf7, 0x89, 0xb8, 0xe9, 0xfc, 0x05, 0x24, 0x6e, 0xb9, 0xb2, 0x10, 0xb7, 0x5b, 0xac,
		0x90, 0xa8, 0xb5, 0x10, 0x9d, 0xd3, 0xff, 0x98, 0xd6, 0xbb, 0xfd, 0x5e, 0x06, 0xeb, 0x3a, 0x82,
		0x74, 0xa7, 0xdb, 0x9f, 0x25, 0x35, 0xef, 0x36, 0x66, 0x52, 0x10, 0xcf, 0xdd, 0x13, 0x69, 0xc8,
		0x9c, 0x15, 0x4d, 0x10, 0x73, 0xa2, 0xf7, 0x42, 0xf4, 0xe6, 0x45, 0x6f, 0x41, 0xf4, 0x5e, 0x8a,
		0xde, 0x2b, 0xc9, 0x03, 0xb1, 0x28, 0x59, 0xaf, 0x05, 0x0b, 0xc4, 0x1b, 0xc1, 0x59, 0x4a, 0xfb,
		0xfe, 0x50, 0xef, 0xef, 0xe5, 0xb8, 0xd1, 0xc4, 0x6a, 0xb0, 0xaf, 0x10, 0x6b, 0xc4, 0x3a, 0xb1,
		0x41, 0x6c, 0x12, 0x1f, 0xdb, 0x31, 0x19, 0x81, 0xf8, 0xec, 0x9e, 0x8b, 0x42, 0xe6, 0x17, 0xd1,
		0x04, 0xf1, 0x55, 0xf4, 0xbe, 0x89, 0xde, 0x96, 0xe8, 0x7d, 0x17, 0xbd, 0x1f, 0xa2, 0xf7, 0x53,
		0xf2, 0x40, 0xfc, 0x92, 0xac, 0xdf, 0x82, 0x05, 0x62, 0x5b, 0x70, 0x78, 0xa8, 0x29, 0x36, 0xa7,
		0x39, 0x8d, 0xa0, 0x55, 0xd0, 0x3f, 0x96, 0xc1, 0xba, 0x8e, 0x20, 0x6d, 0x4c, 0x2d, 0xfe, 0x99,
		0x8c, 0xfd, 0x4b, 0x97, 0xd3, 0xcc, 0xd0, 0xc6, 0x1c, 0x00, 0xfa, 0xfd, 0xee, 0x29, 0x20, 0x64,
		0x0e, 0x88, 0x26, 0xe8, 0x9f, 0x13, 0xbd, 0x41, 0xd1, 0x2b, 0x88, 0x5e, 0x51, 0xf4, 0x86, 0x44,
		0xaf, 0x24, 0x79, 0xa0, 0x5f, 0x96, 0xac, 0x61, 0xc1, 0x02, 0xfd, 0x11, 0xc1, 0x19, 0x4d, 0x79,
		0x66, 0xcb, 0x69, 0xd6, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x92, 0x88, 0xb5, 0x0e,
		0x24, 0x00, 0x00,
	}
	buf, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		panic(err)
	}
	dec := gob.NewDecoder(buf)
	if err := dec.Decode(&tab); err != nil {
		panic(err)
	}
	for i := 0; i < numStates; i++ {
		for j := 0; j < numNTSymbols; j++ {
			gotoTab[i][j] = tab[i][j]
		}
	}
}
