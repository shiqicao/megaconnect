// Code generated by gocc; DO NOT EDIT.

package parser

import (
    pa "github.com/megaspacelab/megaconnect/workflow/parser/utils"
    wf "github.com/megaspacelab/megaconnect/workflow"    
    // "github.com/megaspacelab/megaconnect/workflow/parser/gen/token"
)

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Workflow	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Workflow : kdWorkflow id "{" Decls "}"	<< wf.NewWorkflowDecl(pa.Id(X[1]), 0).AddChildren(X[3].([]wf.Decl)), nil >>`,
		Id:         "Workflow",
		NTType:     1,
		Index:      1,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewWorkflowDecl(pa.Id(X[1]), 0).AddChildren(X[3].([]wf.Decl)), nil
		},
	},
	ProdTabEntry{
		String: `Decls : Decls Decl	<< append(X[0].([]wf.Decl), X[1].(wf.Decl)), nil >>`,
		Id:         "Decls",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(X[0].([]wf.Decl), X[1].(wf.Decl)), nil
		},
	},
	ProdTabEntry{
		String: `Decls : empty	<< []wf.Decl{}, nil >>`,
		Id:         "Decls",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []wf.Decl{}, nil
		},
	},
	ProdTabEntry{
		String: `Decl : Monitor	<<  >>`,
		Id:         "Decl",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Decl : Event	<<  >>`,
		Id:         "Decl",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Decl : Action	<<  >>`,
		Id:         "Decl",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Monitor : kdMonitor id kdChain id kdCondition Expr MonitorVar kdFire id ObjLit	<< pa.MonitorAction(X[1], X[3], X[5], X[6], X[8], X[9]) >>`,
		Id:         "Monitor",
		NTType:     4,
		Index:      7,
		NumSymbols: 10,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.MonitorAction(X[1], X[3], X[5], X[6], X[8], X[9])
		},
	},
	ProdTabEntry{
		String: `MonitorVar : kdVar "{" VarDecls "}"	<< X[2], nil >>`,
		Id:         "MonitorVar",
		NTType:     5,
		Index:      8,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[2], nil
		},
	},
	ProdTabEntry{
		String: `MonitorVar : empty	<<  >>`,
		Id:         "MonitorVar",
		NTType:     5,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Event : kdEvent id "{" ObjFields "}"	<< wf.NewEventDecl(pa.Id(X[1]), wf.NewObjType(X[3].(wf.IdToTy))), nil >>`,
		Id:         "Event",
		NTType:     6,
		Index:      10,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewEventDecl(pa.Id(X[1]), wf.NewObjType(X[3].(wf.IdToTy))), nil
		},
	},
	ProdTabEntry{
		String: `ObjField : id ":" Type	<< []interface{}{X[0], X[2]}, nil >>`,
		Id:         "ObjField",
		NTType:     7,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []interface{}{X[0], X[2]}, nil
		},
	},
	ProdTabEntry{
		String: `ObjFields_ : ObjFields_ "," ObjField	<< pa.ObjFieldsAction(X[0], X[2]) >>`,
		Id:         "ObjFields_",
		NTType:     8,
		Index:      12,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ObjFieldsAction(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ObjFields_ : empty	<< wf.NewIdToTy(), nil >>`,
		Id:         "ObjFields_",
		NTType:     8,
		Index:      13,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewIdToTy(), nil
		},
	},
	ProdTabEntry{
		String: `ObjFields : ObjField ObjFields_	<< pa.ObjFieldsAction(X[1], X[0]) >>`,
		Id:         "ObjFields",
		NTType:     9,
		Index:      14,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ObjFieldsAction(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `ObjFields : empty	<< wf.NewIdToTy(), nil >>`,
		Id:         "ObjFields",
		NTType:     9,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewIdToTy(), nil
		},
	},
	ProdTabEntry{
		String: `Action : kdAction id kdTrigger EventExpr kdRun "{" Stmts "}"	<< pa.ActionAction(X[1], X[3], X[6], X[0], X[7]) >>`,
		Id:         "Action",
		NTType:     10,
		Index:      16,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ActionAction(X[1], X[3], X[6], X[0], X[7])
		},
	},
	ProdTabEntry{
		String: `Stmt : kdFire id Expr	<< pa.FireAction(X[1], X[2], pa.Pos(X[0])) >>`,
		Id:         "Stmt",
		NTType:     11,
		Index:      17,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.FireAction(X[1], X[2], pa.Pos(X[0]))
		},
	},
	ProdTabEntry{
		String: `Stmts : Stmts Stmt ";"	<< append(X[0].(wf.Stmts), X[1].(wf.Stmt)), nil >>`,
		Id:         "Stmts",
		NTType:     12,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(X[0].(wf.Stmts), X[1].(wf.Stmt)), nil
		},
	},
	ProdTabEntry{
		String: `Stmts : empty	<< wf.Stmts{}, nil >>`,
		Id:         "Stmts",
		NTType:     12,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.Stmts{}, nil
		},
	},
	ProdTabEntry{
		String: `EventExpr : EventExpr "||" EventTerm1	<< pa.EBinOpAction(wf.OrEOp, X[0], X[2]) >>`,
		Id:         "EventExpr",
		NTType:     13,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.EBinOpAction(wf.OrEOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `EventExpr : EventExpr "&&" EventTerm1	<< pa.EBinOpAction(wf.AndEOp, X[0], X[2]) >>`,
		Id:         "EventExpr",
		NTType:     13,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.EBinOpAction(wf.AndEOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `EventExpr : EventTerm1	<<  >>`,
		Id:         "EventExpr",
		NTType:     13,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `EventTerm1 : id	<< pa.EVarAction(X[0]) >>`,
		Id:         "EventTerm1",
		NTType:     14,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.EVarAction(X[0])
		},
	},
	ProdTabEntry{
		String: `EventTerm1 : "(" EventExpr ")"	<< X[1], nil >>`,
		Id:         "EventTerm1",
		NTType:     14,
		Index:      24,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Type : kdStr	<< wf.StrType, nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.StrType, nil
		},
	},
	ProdTabEntry{
		String: `Type : kdInt	<< wf.IntType, nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.IntType, nil
		},
	},
	ProdTabEntry{
		String: `Type : kdBool	<< wf.BoolType, nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.BoolType, nil
		},
	},
	ProdTabEntry{
		String: `Type : "{" ObjFields "}"	<< wf.NewObjType(X[1].(wf.IdToTy)), nil >>`,
		Id:         "Type",
		NTType:     15,
		Index:      28,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewObjType(X[1].(wf.IdToTy)), nil
		},
	},
	ProdTabEntry{
		String: `ObjLit : "{" ObjLitFields "}"	<< X[1], nil >>`,
		Id:         "ObjLit",
		NTType:     16,
		Index:      29,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ObjLitField : id ":" Expr	<< []interface{}{X[0], X[2]}, nil >>`,
		Id:         "ObjLitField",
		NTType:     17,
		Index:      30,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return []interface{}{X[0], X[2]}, nil
		},
	},
	ProdTabEntry{
		String: `ObjLitFields_ : ObjLitFields_ "," ObjLitField	<< pa.ObjLitFieldsAction(X[0], X[2]) >>`,
		Id:         "ObjLitFields_",
		NTType:     18,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ObjLitFieldsAction(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ObjLitFields_ : empty	<< wf.NewIdToExpr(), nil >>`,
		Id:         "ObjLitFields_",
		NTType:     18,
		Index:      32,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewIdToExpr(), nil
		},
	},
	ProdTabEntry{
		String: `ObjLitFields : ObjLitField ObjLitFields_	<< pa.ObjLitFieldsAction(X[1], X[0]) >>`,
		Id:         "ObjLitFields",
		NTType:     19,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ObjLitFieldsAction(X[1], X[0])
		},
	},
	ProdTabEntry{
		String: `ObjLitFields : empty	<< wf.NewIdToExpr(), nil >>`,
		Id:         "ObjLitFields",
		NTType:     19,
		Index:      34,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NewIdToExpr(), nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : id "=" Expr	<< pa.VarDeclAction(X[0], X[2]) >>`,
		Id:         "VarDecl",
		NTType:     20,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.VarDeclAction(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `VarDecl : empty	<<  >>`,
		Id:         "VarDecl",
		NTType:     20,
		Index:      36,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VarDecls : VarDecl	<<  >>`,
		Id:         "VarDecls",
		NTType:     21,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarDecls : VarDecls VarDecl	<< pa.VarDeclsAction(X[0], X[1]) >>`,
		Id:         "VarDecls",
		NTType:     21,
		Index:      38,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.VarDeclsAction(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Expr : Expr "||" Term1	<< pa.BinOpAction(wf.OrOp, X[0], X[2]) >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.OrOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Expr : Expr "&&" Term1	<< pa.BinOpAction(wf.AndOp, X[0], X[2]) >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.AndOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Expr : Term1	<<  >>`,
		Id:         "Expr",
		NTType:     22,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 "==" Term2	<< pa.BinOpAction(wf.EqualOp, X[0], X[2]) >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.EqualOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 "!=" Term2	<< pa.BinOpAction(wf.NotEqualOp, X[0], X[2]) >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      43,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.NotEqualOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 ">" Term2	<< pa.BinOpAction(wf.GreaterThanOp, X[0], X[2]) >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.GreaterThanOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 ">=" Term2	<< pa.BinOpAction(wf.GreaterThanEqualOp, X[0], X[2]) >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      45,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.GreaterThanEqualOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 "<" Term2	<< pa.BinOpAction(wf.LessThanOp, X[0], X[2]) >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.LessThanOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 "<=" Term2	<< pa.BinOpAction(wf.LessThanEqualOp, X[0], X[2]) >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      47,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.LessThanEqualOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term1 : Term2	<<  >>`,
		Id:         "Term1",
		NTType:     23,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term2 : Term2 "+" Term3	<< pa.BinOpAction(wf.PlusOp, X[0], X[2]) >>`,
		Id:         "Term2",
		NTType:     24,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.PlusOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term2 : Term2 "-" Term3	<< pa.BinOpAction(wf.MinusOp, X[0], X[2]) >>`,
		Id:         "Term2",
		NTType:     24,
		Index:      50,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.MinusOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term2 : Term3	<<  >>`,
		Id:         "Term2",
		NTType:     24,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term3 : Term3 "*" Term4	<< pa.BinOpAction(wf.MultOp, X[0], X[2]) >>`,
		Id:         "Term3",
		NTType:     25,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.MultOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term3 : Term3 "/" Term4	<< pa.BinOpAction(wf.DivOp, X[0], X[2]) >>`,
		Id:         "Term3",
		NTType:     25,
		Index:      53,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BinOpAction(wf.DivOp, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term3 : Term4	<<  >>`,
		Id:         "Term3",
		NTType:     25,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term4 : Term4 "." id	<< pa.ObjAccessorAction(X[0], X[2]) >>`,
		Id:         "Term4",
		NTType:     26,
		Index:      55,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ObjAccessorAction(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Term4 : Term5	<<  >>`,
		Id:         "Term4",
		NTType:     26,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term5 : intLit	<< pa.IntLitAction(X[0]) >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.IntLitAction(X[0])
		},
	},
	ProdTabEntry{
		String: `Term5 : boolLit	<< pa.BoolLitAction(X[0]) >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      58,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.BoolLitAction(X[0])
		},
	},
	ProdTabEntry{
		String: `Term5 : stringLit	<< pa.StrLitAction(X[0]) >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.StrLitAction(X[0])
		},
	},
	ProdTabEntry{
		String: `Term5 : FuncCall	<<  >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      60,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term5 : ObjLit	<< pa.ObjLitAction(X[0]) >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      61,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.ObjLitAction(X[0])
		},
	},
	ProdTabEntry{
		String: `Term5 : id	<< pa.VarAction(X[0]) >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.VarAction(X[0])
		},
	},
	ProdTabEntry{
		String: `Term5 : "(" Expr ")"	<< X[1], nil >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      63,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Term5 : kdProps "(" id ")"	<< pa.PropsAction(X[2], X[0], X[3]) >>`,
		Id:         "Term5",
		NTType:     27,
		Index:      64,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.PropsAction(X[2], X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `FuncCall : Namespaces id "(" Args ")"	<< pa.FuncCallAction(X[0], X[1], X[3]) >>`,
		Id:         "FuncCall",
		NTType:     28,
		Index:      65,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.FuncCallAction(X[0], X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `FuncCall : id "(" Args ")"	<< pa.FuncCallAction(nil, X[0], X[2]) >>`,
		Id:         "FuncCall",
		NTType:     28,
		Index:      66,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.FuncCallAction(nil, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Args_ : Args_ "," Expr	<< append(X[0].(wf.Args), X[2].(wf.Expr)), nil >>`,
		Id:         "Args_",
		NTType:     29,
		Index:      67,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(X[0].(wf.Args), X[2].(wf.Expr)), nil
		},
	},
	ProdTabEntry{
		String: `Args_ : empty	<< wf.Args{}, nil >>`,
		Id:         "Args_",
		NTType:     29,
		Index:      68,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.Args{}, nil
		},
	},
	ProdTabEntry{
		String: `Args : Expr Args_	<< append(wf.Args{X[0].(wf.Expr)}, X[1].(wf.Args)...), nil >>`,
		Id:         "Args",
		NTType:     30,
		Index:      69,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(wf.Args{X[0].(wf.Expr)}, X[1].(wf.Args)...), nil
		},
	},
	ProdTabEntry{
		String: `Args : empty	<< wf.Args{}, nil >>`,
		Id:         "Args",
		NTType:     30,
		Index:      70,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.Args{}, nil
		},
	},
	ProdTabEntry{
		String: `Namespace : id "::"	<< pa.Id(X[0]), nil >>`,
		Id:         "Namespace",
		NTType:     31,
		Index:      71,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return pa.Id(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Namespaces : Namespaces Namespace	<< append(X[0].(wf.NamespacePrefix), X[1].(*wf.Id)), nil >>`,
		Id:         "Namespaces",
		NTType:     32,
		Index:      72,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return append(X[0].(wf.NamespacePrefix), X[1].(*wf.Id)), nil
		},
	},
	ProdTabEntry{
		String: `Namespaces : Namespace	<< wf.NamespacePrefix{X[0].(*wf.Id)}, nil >>`,
		Id:         "Namespaces",
		NTType:     32,
		Index:      73,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return wf.NamespacePrefix{X[0].(*wf.Id)}, nil
		},
	},
}
