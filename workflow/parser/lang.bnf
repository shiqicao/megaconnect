// LEXICAL

// Whitespace
!_whitespace : ' ' | '\t' | '\r' | '\n' ;

// keywords 
kdMonitor : 'm' 'o' 'n' 'i' 't' 'o' 'r' ;
kdEvent : 'e' 'v' 'e' 'n' 't' ;
kdAction : 'a' 'c' 't' 'i' 'o' 'n' ;
kdChain : 'c' 'h' 'a' 'i' 'n' ;
kdCondition : 'c' 'o' 'n' 'd' 'i' 't' 'i' 'o' 'n' ;
kdVar : 'v' 'a' 'r' ;
kdWorkflow : 'w' 'o' 'r' 'k' 'f' 'l' 'o' 'w';
kdFire : 'f' 'i' 'r' 'e';

// letter and digit
_digit : '0' - '9' ;
_letter : 'a' - 'z' | 'A' - 'Z' ;

boolLit : 't' 'r' 'u' 'e' | 'f' 'a' 'l' 's' 'e' ;

// string literals 
stringLit : '"' { . | '\\' '"' | _escapeChar } '"' ; 

// single-character escapes 
_escapeChar : '\\' 'n' | '\\' 'r' | '\\' 't' ;

// integer literals
intLit : '1' - '9' { _digit } | '0';

// comment
!comment : '/' '/' {.} ;

// identifier 
id : _letter {_letter | _digit} ;

// SYNTAX
<<
import (
    pa "github.com/megaspacelab/megaconnect/workflow/parser/utils"
    wf "github.com/megaspacelab/megaconnect/workflow"    
    "github.com/megaspacelab/megaconnect/workflow/parser/gen/token"
)
>>

Workflow 
  : kdWorkflow id "{" Decls "}" << wf.NewWorkflowDecl(pa.Lit($1), 0).AddChildren($3.([]wf.Decl)), nil>>
  ;

Decls 
  : Decl        <<[]wf.Decl{$0.(wf.Decl)}, nil>>
  | Decls Decl  <<append($0.([]wf.Decl), $1.([]wf.Decl)[0]), nil>>
  ;

Decl
  : Monitor
  | empty
  ;

Monitor : 
  kdMonitor id 
    kdChain id 
    kdCondition Expr 
    MonitorVar
    kdFire id ObjLit
  <<pa.MonitorAction($1, $3, $5, $6, $8, $9)>>;

MonitorVar 
  : kdVar "{" VarDecls "}" <<$2, nil>>
  | empty 
  ;

ObjLit : "{" ObjLitFields "}" <<$1, nil>>;

ObjLitField
  : id ":" Expr "," <<pa.VarDeclAction($0, $2)>>
  | empty
  ;

ObjLitFields
  : ObjLitField
  | ObjLitFields ObjLitField <<pa.VarDeclsAction($0, $1)>>
  ;

VarDecl 
  : id "=" Expr <<pa.VarDeclAction($0, $2)>>
  | empty
  ;

VarDecls
  : VarDecl
  | VarDecls VarDecl <<pa.VarDeclsAction($0, $1)>>
  ;
   
MonitorProperty 
  : kdChain ":" id
  | kdCondition ":" Expr  
  ;

MonitorProperties 
  : MonitorProperty 
  | MonitorProperty MonitorProperties
  ;

Expr
  : Expr "||" Term1 <<wf.NewBinOp(wf.OrOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Expr "&&" Term1 <<wf.NewBinOp(wf.AndOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term1
  ;

Term1 
  : Term1 "==" Term2 <<wf.NewBinOp(wf.EqualOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term1 "!=" Term2 <<wf.NewBinOp(wf.NotEqualOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term1 ">" Term2 <<wf.NewBinOp(wf.GreaterThanOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term1 ">=" Term2 <<wf.NewBinOp(wf.GreaterThanEqualOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term1 "<" Term2 <<wf.NewBinOp(wf.LessThanOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term1 "<=" Term2 <<wf.NewBinOp(wf.LessThanEqualOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term2
  ;

Term2
  : Term2 "+" Term3 <<wf.NewBinOp(wf.PlusOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term2 "-" Term3 <<wf.NewBinOp(wf.MinusOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term3 
  ;

Term3 
  : Term3 "*" Term4 <<wf.NewBinOp(wf.MultOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term3 "/" Term4 <<wf.NewBinOp(wf.DivOp, $0.(wf.Expr), $2.(wf.Expr)), nil>>
  | Term4
  ;

Term4
  : Term4 "." id <<pa.ObjAccessorAction($0, $2)>>
  | Term5
  ; 

Term5
  : intLit       <<pa.IntLitAction($0)>>
  | boolLit      <<pa.BoolLitAction($0)>>
  | stringLit    <<pa.StrLitAction($0)>>
  | id           <<wf.NewVar(string($0.(*token.Token).Lit)), nil>>
  | "(" Expr ")" <<$1, nil>>
  ;
