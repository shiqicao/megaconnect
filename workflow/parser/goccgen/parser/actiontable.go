// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"bytes"
	"compress/gzip"
	"encoding/gob"
)

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{}

func init() {
	tab := []struct {
		CanRecover bool
		Actions    []struct {
			Index  int
			Action int
			Amount int
		}
	}{}
	data := []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xec, 0x98, 0xdf, 0x8b, 0x1b, 0xd5,
		0x17, 0xc0, 0xef, 0x99, 0xbd, 0xdf, 0x7c, 0xd7, 0xd8, 0x2e, 0x65, 0x59, 0xca, 0xb2, 0x2c, 0x25,
		0x94, 0x5a, 0x96, 0x12, 0xc2, 0x12, 0x42, 0x08, 0x31, 0x86, 0x38, 0x0e, 0xc3, 0x38, 0x0c, 0x41,
		0xe6, 0x49, 0xea, 0x0f, 0x94, 0xda, 0x87, 0x3e, 0xb8, 0x85, 0x76, 0x2b, 0xe2, 0x2f, 0xb4, 0x56,
		0x2d, 0x22, 0x22, 0x3e, 0x88, 0x7f, 0x85, 0x8f, 0xe2, 0x83, 0xf8, 0xe0, 0x93, 0x7f, 0x80, 0x88,
		0x88, 0x0f, 0x22, 0x22, 0x22, 0x52, 0x44, 0xc4, 0x07, 0x1f, 0x72, 0xe5, 0xde, 0x4f, 0xbc, 0x65,
		0xe3, 0x84, 0x76, 0x33, 0x13, 0x2a, 0x58, 0x0a, 0xbd, 0x97, 0xcc, 0xcd, 0xe7, 0x73, 0xe6, 0x6e,
		0xe6, 0x9c, 0x33, 0xf7, 0xa8, 0x79, 0x2b, 0x90, 0xc0, 0x5c, 0x57, 0x62, 0xae, 0x2a, 0xb5, 0x63,
		0x5e, 0x5b, 0x91, 0xc0, 0x5c, 0x55, 0x12, 0x48, 0xfd, 0xa1, 0xa7, 0xf7, 0xf2, 0xf3, 0xe7, 0x2e,
		0x3e, 0x77, 0xfe, 0x92, 0x04, 0x4a, 0xfe, 0xff, 0xe0, 0xb9, 0xfd, 0x0b, 0x17, 0xf7, 0x2e, 0x8b,
		0x79, 0x53, 0x29, 0xf5, 0x80, 0x79, 0x23, 0x10, 0x69, 0x3d, 0xf6, 0xc4, 0xe5, 0xfd, 0x4b, 0x57,
		0xce, 0xed, 0x37, 0x5e, 0x6c, 0x3c, 0xbc, 0xf7, 0xcc, 0xf9, 0xe7, 0x1b, 0x17, 0xf6, 0xf6, 0xef,
		0x6f, 0xb0, 0x72, 0x3a, 0x7f, 0xf6, 0xe2, 0x95, 0xbd, 0x7d, 0x3b, 0x6f, 0xbc, 0x6c, 0xbf, 0x2a,
		0xe6, 0x9a, 0x52, 0x4d, 0xf3, 0xba, 0xd5, 0x5c, 0x53, 0xb2, 0x22, 0xff, 0x73, 0x5f, 0x14, 0xad,
		0xa4, 0xc6, 0xf7, 0x98, 0xba, 0xaf, 0x89, 0x56, 0x4a, 0x4d, 0xee, 0xbb, 0x61, 0xae, 0x2b, 0xf3,
		0x51, 0x20, 0xa2, 0xed, 0x3f, 0xa5, 0x02, 0x91, 0xc0, 0xfd, 0x5f, 0x13, 0x2d, 0x35, 0x37, 0x5b,
		0x15, 0x2d, 0xab, 0x4a, 0x05, 0x81, 0xd4, 0x6d, 0xe8, 0x4a, 0xd6, 0x44, 0xcb, 0xb1, 0xe9, 0x07,
		0x5a, 0xd6, 0x0f, 0x7e, 0x10, 0x58, 0xc7, 0x9a, 0x1b, 0xfe, 0xfe, 0x60, 0x95, 0x0f, 0x56, 0x3d,
		0xf7, 0x38, 0x1e, 0xfb, 0xcf, 0x2f, 0xaa, 0xb1, 0x08, 0xe5, 0x31, 0xd1, 0xb2, 0xe9, 0x97, 0x6f,
		0xb9, 0xd9, 0xba, 0x68, 0xd9, 0x56, 0x2a, 0xd0, 0xee, 0xb3, 0x13, 0x4a, 0xba, 0xa2, 0xe5, 0x8c,
		0x92, 0x9e, 0x68, 0x69, 0x2a, 0xe9, 0x8b, 0x96, 0x96, 0x52, 0xc1, 0x9a, 0x6c, 0x48, 0x20, 0x8f,
		0x28, 0x39, 0xce, 0x70, 0x82, 0xa1, 0xc1, 0x70, 0x92, 0xe1, 0x14, 0xc3, 0x69, 0x86, 0x1d, 0x86,
		0x33, 0x0c, 0x4d, 0x86, 0x16, 0xc3, 0x2e, 0x43, 0x9b, 0xa1, 0xe3, 0x06, 0x1b, 0x83, 0x95, 0x1c,
		0xb3, 0x12, 0x2d, 0x6d, 0x2b, 0xd1, 0xd2, 0xb1, 0x12, 0x2d, 0x5d, 0xa5, 0x82, 0xba, 0xbb, 0xbc,
		0x4b, 0x0c, 0xbb, 0xc4, 0xb0, 0x4b, 0x0c, 0xbb, 0x36, 0x06, 0x2d, 0x3d, 0x1b, 0x83, 0x96, 0xbe,
		0x8d, 0x41, 0xcb, 0xc0, 0xc6, 0xa0, 0x65, 0x68, 0x63, 0xd0, 0x32, 0xb2, 0x31, 0x68, 0x09, 0x95,
		0x0a, 0x8e, 0x38, 0xd0, 0x10, 0xd0, 0x10, 0xd0, 0x10, 0xd0, 0x90, 0x9b, 0x19, 0x72, 0x33, 0x43,
		0x6e, 0x66, 0xc8, 0xcd, 0x0c, 0xb9, 0x99, 0x21, 0x37, 0x33, 0xb4, 0x37, 0xa3, 0x25, 0xb2, 0x37,
		0xa3, 0x25, 0xf6, 0x7b, 0x14, 0x81, 0x8d, 0xc0, 0x46, 0x60, 0x23, 0xb0, 0x11, 0xd8, 0x08, 0x6c,
		0x04, 0x36, 0x02, 0x1b, 0x81, 0x8d, 0xd8, 0xa3, 0x88, 0x3d, 0x8a, 0xec, 0x1e, 0x69, 0x49, 0xec,
		0x1e, 0x69, 0x49, 0xbd, 0x24, 0x45, 0x92, 0x22, 0x49, 0x91, 0xa4, 0x48, 0x52, 0x24, 0x29, 0x92,
		0x14, 0x49, 0x8a, 0x24, 0x45, 0x92, 0x22, 0x49, 0x91, 0xa4, 0xfc, 0x21, 0x52, 0xfe, 0x10, 0x37,
		0x25, 0x19, 0x92, 0x0c, 0x49, 0x86, 0x24, 0x43, 0x92, 0x21, 0xc9, 0x90, 0x64, 0x48, 0x32, 0x24,
		0x19, 0x92, 0x0c, 0x49, 0x86, 0x24, 0x43, 0x92, 0x21, 0xc9, 0xbc, 0x64, 0x8c, 0x64, 0x8c, 0x64,
		0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64,
		0x8c, 0x64, 0x8c, 0x64, 0x8c, 0x64, 0xec, 0x7f, 0xd6, 0x19, 0x3f, 0xeb, 0x47, 0xf9, 0x59, 0x9f,
		0xe5, 0x67, 0xfd, 0xb8, 0xfb, 0xfd, 0x6f, 0x88, 0x96, 0x27, 0xfd, 0x03, 0xf9, 0xd4, 0xad, 0x9f,
		0x84, 0xbb, 0x97, 0x97, 0x70, 0xf9, 0xe8, 0x32, 0x12, 0x8a, 0x0c, 0xa6, 0x79, 0x65, 0xc5, 0x65,
		0x92, 0x17, 0xc8, 0x24, 0x2f, 0xd9, 0xcf, 0xb5, 0xbc, 0xa2, 0x54, 0x70, 0x4f, 0x41, 0x0a, 0x31,
		0xaf, 0x92, 0x43, 0x6c, 0x45, 0xb1, 0x49, 0xc4, 0xa6, 0x7c, 0x9b, 0x45, 0x6c, 0x21, 0xb0, 0x69,
		0xc4, 0xd6, 0x1d, 0x9b, 0x47, 0xcc, 0xdb, 0xf0, 0x77, 0x95, 0x0a, 0xee, 0x2d, 0x95, 0x41, 0xcc,
		0x3b, 0xa4, 0x10, 0xf3, 0x2e, 0xc4, 0xa1, 0xdf, 0x8f, 0x6a, 0x92, 0x87, 0x79, 0x8f, 0xec, 0x61,
		0xde, 0x87, 0x1f, 0x79, 0x7e, 0xc5, 0x79, 0xc3, 0xd1, 0x53, 0x4f, 0xaf, 0x38, 0x61, 0x38, 0x7a,
		0xe6, 0xe9, 0x15, 0x67, 0x0a, 0x47, 0xbf, 0xad, 0x84, 0x61, 0x2f, 0x9b, 0x0f, 0x5c, 0x81, 0x75,
		0xd3, 0x0f, 0x95, 0x2b, 0xb4, 0x27, 0x7c, 0x81, 0x6a, 0x92, 0xd1, 0x9a, 0x64, 0xb4, 0x26, 0x71,
		0x36, 0x0f, 0x55, 0xa0, 0x00, 0xb5, 0x00, 0xb5, 0x00, 0xb5, 0x00, 0xb5, 0x16, 0xa8, 0x74, 0x6d,
		0x40, 0x6d, 0x40, 0x6d, 0x40, 0x6d, 0x76, 0xae, 0xcd, 0xce, 0xb5, 0xd9, 0xb9, 0x36, 0x3b, 0xd7,
		0x66, 0xe7, 0xda, 0xec, 0x5c, 0xfb, 0x1f, 0x95, 0x0e, 0x6c, 0x07, 0x6c, 0x07, 0x6c, 0x07, 0x6c,
		0x07, 0x6c, 0x07, 0x6c, 0x07, 0x6c, 0x07, 0x6c, 0x07, 0x6c, 0x07, 0x6c, 0x67, 0x0e, 0xb6, 0x0b,
		0xb6, 0x0b, 0xb6, 0x0b, 0xb6, 0x0b, 0xb6, 0x0b, 0xb6, 0x0b, 0xb6, 0x0b, 0xb6, 0x0b, 0xb6, 0x0b,
		0xb6, 0x3b, 0x07, 0xdb, 0x03, 0xdb, 0x03, 0xdb, 0x03, 0xdb, 0x03, 0xdb, 0x03, 0xdb, 0x03, 0xdb,
		0x03, 0xdb, 0x03, 0xdb, 0x03, 0xdb, 0x9b, 0x83, 0xed, 0x83, 0xed, 0x83, 0xed, 0x83, 0xed, 0x83,
		0xed, 0x83, 0xed, 0x83, 0xed, 0x83, 0xed, 0x83, 0xed, 0x83, 0xed, 0xcf, 0xc1, 0x0e, 0xc0, 0x0e,
		0xc0, 0x0e, 0xc0, 0x0e, 0xc0, 0x0e, 0xc0, 0x0e, 0xc0, 0x0e, 0xc0, 0x0e, 0xc0, 0x0e, 0xc0, 0x0e,
		0xe6, 0x34, 0x27, 0x23, 0xb0, 0x23, 0xb0, 0x23, 0xb0, 0x23, 0xb0, 0x23, 0xb0, 0x23, 0xb0, 0x23,
		0xb0, 0x23, 0xb0, 0x23, 0xb0, 0x23, 0x9e, 0xa1, 0x11, 0xcf, 0xd0, 0x68, 0x4e, 0x73, 0x12, 0x22,
		0x09, 0x91, 0x84, 0x48, 0x42, 0x24, 0x21, 0x92, 0x10, 0x49, 0x88, 0x24, 0x44, 0x12, 0x22, 0x09,
		0x91, 0x84, 0x48, 0xc2, 0x39, 0x92, 0x18, 0x49, 0x8c, 0x24, 0x46, 0x12, 0x23, 0x89, 0x91, 0xc4,
		0x48, 0x62, 0x24, 0x31, 0x92, 0x18, 0x49, 0x8c, 0x24, 0x46, 0x12, 0x93, 0x0d, 0x62, 0xb2, 0xc1,
		0xcd, 0xed, 0x4a, 0x90, 0x24, 0x48, 0x12, 0x24, 0x09, 0x92, 0x04, 0x49, 0x82, 0x24, 0x41, 0x92,
		0x20, 0x49, 0x90, 0x24, 0x48, 0x12, 0x24, 0x09, 0x92, 0x04, 0x49, 0x72, 0xeb, 0x5c, 0x73, 0x8b,
		0xcb, 0x84, 0x98, 0x13, 0x62, 0x4e, 0x88, 0x39, 0x21, 0xe6, 0x84, 0x98, 0x13, 0x62, 0x4e, 0x88,
		0x39, 0x21, 0xe6, 0x84, 0x98, 0x13, 0x62, 0x4e, 0x88, 0x39, 0x21, 0xe6, 0x84, 0x98, 0x13, 0x62,
		0x5e, 0x3a, 0xc4, 0xff, 0xea, 0xe5, 0xa2, 0x86, 0xc3, 0x7c, 0xec, 0xbb, 0x4c, 0xf3, 0x89, 0x9b,
		0x6e, 0xdb, 0xe9, 0xa7, 0x33, 0x95, 0x44, 0x8b, 0xf9, 0x6c, 0xfa, 0x51, 0x20, 0x0d, 0x6a, 0x4b,
		0xc3, 0xf7, 0x2a, 0x07, 0xab, 0xc9, 0x61, 0x7b, 0x95, 0xa6, 0xe7, 0x1c, 0x2c, 0x26, 0x87, 0xe5,
		0xb4, 0x7c, 0xcf, 0xb3, 0x68, 0x2d, 0x99, 0xed, 0x79, 0xda, 0x9e, 0xb8, 0x68, 0x19, 0x99, 0x25,
		0x76, 0x3c, 0x71, 0xd1, 0x0a, 0x32, 0x4b, 0xec, 0x7a, 0xe2, 0xa2, 0xc5, 0x63, 0x96, 0xd8, 0xf3,
		0xc4, 0x45, 0xeb, 0xc6, 0x2c, 0xb1, 0xef, 0x89, 0x8b, 0x96, 0x8c, 0x59, 0xe2, 0xc0, 0x77, 0x5c,
		0xd5, 0x54, 0x8b, 0xd9, 0x6e, 0x74, 0xe4, 0xf9, 0xd5, 0x14, 0x8a, 0x59, 0x7e, 0xe8, 0xf9, 0x15,
		0xd7, 0x08, 0x47, 0x8f, 0x3d, 0xbd, 0xe2, 0xe2, 0xe0, 0xe8, 0x89, 0xa7, 0x57, 0x9c, 0xd7, 0x1d,
		0x3d, 0xbf, 0x99, 0x79, 0x3e, 0x27, 0xcf, 0x1c, 0xf7, 0xc7, 0x46, 0x47, 0x38, 0x36, 0x3a, 0xe2,
		0x53, 0x9d, 0xf9, 0x82, 0x5c, 0x67, 0xbe, 0x24, 0xd9, 0x99, 0xaf, 0xc8, 0x76, 0xe6, 0xeb, 0xe9,
		0x5b, 0x74, 0x20, 0x6b, 0x3e, 0x6d, 0x9d, 0x04, 0x77, 0xd2, 0x5d, 0xda, 0xb4, 0xab, 0xbe, 0x99,
		0x71, 0x69, 0x31, 0xdf, 0xfa, 0xe5, 0x9b, 0x2c, 0xdf, 0x74, 0x35, 0xad, 0xc6, 0xab, 0x5b, 0x7d,
		0xa9, 0xc7, 0x4c, 0x56, 0xb2, 0x8d, 0x64, 0x9b, 0x63, 0x26, 0xf3, 0x1d, 0xc9, 0xda, 0x7c, 0xef,
		0xda, 0xef, 0x1a, 0x2f, 0x84, 0xf5, 0x79, 0x07, 0x4d, 0xe6, 0x87, 0x69, 0xc6, 0xfc, 0x71, 0x9a,
		0x31, 0x7f, 0x9a, 0x66, 0xcc, 0x9f, 0xa7, 0x19, 0xf3, 0x97, 0x69, 0xc6, 0xbc, 0xe1, 0x3a, 0xba,
		0x1a, 0x6f, 0x7b, 0xf5, 0xf2, 0xc7, 0x4d, 0xe6, 0xd7, 0xe9, 0xe3, 0xf9, 0x9b, 0xdf, 0xad, 0x08,
		0x70, 0xa5, 0x07, 0x4e, 0xe6, 0xf7, 0xe9, 0x53, 0xf4, 0x87, 0xd7, 0xa4, 0x68, 0x96, 0x77, 0xe4,
		0x54, 0xe3, 0x35, 0xaf, 0xbe, 0xd4, 0x23, 0xa7, 0x1a, 0x6f, 0x7b, 0xf5, 0x3b, 0x77, 0xe4, 0x34,
		0x7d, 0x9e, 0xfe, 0xe4, 0xfa, 0x44, 0x6a, 0xac, 0x98, 0xc8, 0x2a, 0x6b, 0x26, 0x52, 0xf7, 0x8f,
		0xe1, 0x3a, 0x8f, 0xe1, 0xba, 0x7f, 0x54, 0xb6, 0x08, 0x7d, 0xeb, 0xf6, 0x9e, 0xcb, 0xbb, 0x4b,
		0xee, 0xf0, 0x92, 0xa2, 0x3e, 0x70, 0x22, 0xa7, 0x5c, 0x5a, 0xdf, 0x5a, 0x62, 0x86, 0x5b, 0x91,
		0x2d, 0x67, 0x3a, 0x4d, 0x72, 0x9b, 0xc8, 0x0e, 0x21, 0x4c, 0xe4, 0x8c, 0x6b, 0x01, 0xb7, 0xe6,
		0xe5, 0xb5, 0x89, 0x6d, 0x2d, 0x4f, 0xb9, 0x49, 0x8b, 0xcc, 0x36, 0xb1, 0x97, 0x76, 0xdc, 0xa4,
		0x4d, 0x6e, 0x9b, 0xd0, 0x79, 0xd9, 0x09, 0x2d, 0xd1, 0x56, 0xf9, 0xb4, 0x36, 0xb1, 0x2d, 0xd2,
		0xae, 0x9b, 0xf4, 0xfd, 0xee, 0x54, 0x9a, 0xd1, 0x26, 0xb6, 0xc1, 0xe9, 0xb8, 0xc9, 0xd0, 0x1b,
		0x96, 0x95, 0xcc, 0xa0, 0x2f, 0x2b, 0x8b, 0x41, 0xbf, 0x43, 0xe9, 0x8b, 0xda, 0xd8, 0x24, 0x0f,
		0x15, 0x9e, 0x71, 0x1d, 0xaa, 0x36, 0x82, 0x6b, 0x81, 0x2b, 0x3c, 0xe9, 0x5a, 0xa0, 0xd4, 0xb6,
		0xc1, 0x95, 0x3c, 0xef, 0x3a, 0x50, 0x6a, 0x01, 0x77, 0x00, 0x97, 0x3c, 0xf1, 0x2a, 0x00, 0x77,
		0x01, 0x97, 0x3c, 0xf3, 0x2a, 0x00, 0xf7, 0x00, 0x97, 0x3c, 0xf5, 0x2a, 0x00, 0xf7, 0x01, 0x97,
		0x3c, 0xf7, 0x2a, 0x00, 0x0f, 0x00, 0x97, 0x3c, 0xf9, 0x2a, 0xe8, 0x93, 0x46, 0x80, 0x2b, 0x3d,
		0xfb, 0x2a, 0xe8, 0x93, 0x42, 0x34, 0x95, 0x9e, 0x7e, 0x15, 0x68, 0x62, 0x34, 0xcb, 0x3b, 0xff,
		0xaa, 0xf1, 0x1e, 0x52, 0x5f, 0xe2, 0xf9, 0x17, 0x92, 0x1c, 0xc9, 0xb2, 0x4e, 0xb0, 0x68, 0x9c,
		0x36, 0x90, 0x6c, 0xdc, 0x76, 0x03, 0x76, 0x77, 0xd5, 0xbf, 0x7d, 0x55, 0x71, 0x73, 0x75, 0xd6,
		0x37, 0x38, 0x85, 0xc5, 0x69, 0x81, 0x06, 0x07, 0x5a, 0x61, 0x6d, 0x5a, 0xb8, 0x5d, 0x2a, 0x59,
		0x9a, 0x66, 0xda, 0x25, 0x98, 0x25, 0xab, 0x52, 0x21, 0xb3, 0x64, 0x41, 0x2a, 0x64, 0x96, 0xac,
		0x45, 0x85, 0xcc, 0x92, 0x65, 0xa8, 0x90, 0x59, 0xb2, 0x02, 0x15, 0xb6, 0xb4, 0x95, 0x16, 0x9f,
		0xc2, 0x96, 0xb6, 0xd2, 0xba, 0x53, 0x68, 0x58, 0x56, 0xc9, 0x81, 0xbe, 0xac, 0x5a, 0x03, 0x7d,
		0x49, 0x45, 0xe6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x11, 0xa5, 0xb5, 0x93, 0x26, 0x00,
		0x00,
	}
	buf, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		panic(err)
	}
	dec := gob.NewDecoder(buf)
	if err := dec.Decode(&tab); err != nil {
		panic(err)
	}

	for i, row := range tab {
		actionTab[i].canRecover = row.CanRecover
		for _, a := range row.Actions {
			switch a.Action {
			case 0:
				actionTab[i].actions[a.Index] = accept(true)
			case 1:
				actionTab[i].actions[a.Index] = reduce(a.Amount)
			case 2:
				actionTab[i].actions[a.Index] = shift(a.Amount)
			}
		}
	}
}
